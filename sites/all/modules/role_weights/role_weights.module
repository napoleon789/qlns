<?php
/**
 * @file
 * Provides a simple API and Token support to Drupal's role weights.
 */

/**
 * Implements hook_help().
 */
function role_weights_help($path, $arg) {
  switch ($path) {
    case 'admin/help#role_weights':
      $output  = '<p>' . t("Role Weights is a small utility module providing a simple API and Token support to Drupal's role weights.") . '</p>';
      $output .= '<p>' . t('For more information visit <a href="http://drupal.org/project/role_weights">Role Weights module page on drupal.org</a>.') . '</p>';
      return $output;
  }
}

/**
 * Returns a weight for a given role rid.
 *
 * @param int $role_id
 *   A role rid.
 * @param bool $refresh
 *   If true, the static cache will be refreshed (used if you want to change
 *   the weight in the midst of a page load). This is done automatically by
 *   _role_weights_set_weight() - you should not need to do this.
 *
 * @return int
 *   A corresponding weight for the role.
 */
function role_weights_get_weight($role_id = NULL, $refresh = FALSE) {
  // Static cache the weights, to improve performance.
  static $weights;
  if (!$weights || $refresh) {
    $weights = _role_weights_get_weights();
  }
  return ($weights[$role_id] != NULL) ? $weights[$role_id] : 0;
}

/**
 * Return the 'lightest' or 'heaviest' role.
 *
 * Accepts a standard roles array from user object and returns the 'lightest'
 * or 'heaviest' based on the current weights settings.
 *
 * @param array $roles
 *   A role array containing a users roles - $rid -> $role_name.
 * @param string $weight_end
 *   Which weight to get - 'lightest' or 'heaviest'.
 *
 * @return int
 *   The lighest or heaviest role id from $roles.
 */
function role_weights_get_weighted_max(array $roles, $weight_end = 'lightest') {
  if (is_array($roles)) {
    $role_weights = _role_weights_get_weights();

    if ($weight_end == 'lightest') {
      asort($role_weights);
    }
    else {
      arsort($role_weights);
    }

    // Run through $roles, returning FIRST role matched.
    foreach ($role_weights as $rid => $weight) {
      if (array_key_exists($rid, $roles)) {
        return $rid;
      }
    }
  }
}

/**
 * Returns current role weights.
 */
function _role_weights_get_weights() {
  $weights = array();
  $result = db_query('SELECT rid, weight FROM {role}');
  foreach ($result as $record) {
    $weights[$record->rid] = $record->weight;
  }
  return $weights;
}

/**
 * Implements hook_token_info().
 */
function role_weights_token_info() {
  $user = array();

  // Role Weights tokens for users.
  $user['lightest-role'] = array(
    'name' => t("User's lightest role name"),
    'description' => t("The user's lightest role name"),
    'type' => 'user',
  );
  $user['lightest-role-id'] = array(
    'name' => t("User's lightest role id"),
    'description' => t("The user's lightest role id"),
    'type' => 'user',
  );
  $user['lightest-role-class'] = array(
    'name' => t("User's lightest role class name"),
    'description' => t("The user's lightest role class name (for use in CSS)"),
    'type' => 'user',
  );
  $user['heaviest-role'] = array(
    'name' => t("User's heaviest role name"),
    'description' => t("The user's heaviest role name"),
    'type' => 'user',
  );
  $user['heaviest-role-id'] = array(
    'name' => t("User's heaviest role id"),
    'description' => t("The user's heaviest role id"),
    'type' => 'user',
  );
  $user['heaviest-role-class'] = array(
    'name' => t("User's heaviest role class name"),
    'description' => t("The user's heaviest role class name (for use in CSS)"),
    'type' => 'user',
  );

  return array('tokens' => array('user' => $user));
}

/**
 * Implements hook_tokens().
 */
function role_weights_tokens($type, $tokens, $data = array(), $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    if (array_key_exists('pathauto', $options)) {
      $account = user_load($data['user']->uid);
    }
    $css_pattern = '/[^0-9A-Za-z \-]/';

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'lightest-role':
          $lightest_role = role_weights_get_weighted_max($account->roles, 'lightest');
          $replacements[$original] = check_plain($account->roles[$lightest_role]);
          break;

        case 'lightest-role-id':
          $lightest_role = role_weights_get_weighted_max($account->roles, 'lightest');
          $replacements[$original] = $lightest_role;
          break;

        case 'lightest-role-class':
          $lightest_role = role_weights_get_weighted_max($account->roles, 'lightest');
          $replacements[$original] = 'role-' . strtolower(str_replace(' ', '-', preg_replace($css_pattern, '', $account->roles[$lightest_role])));
          break;

        case 'heaviest-role':
          $heaviest_role = role_weights_get_weighted_max($account->roles, 'heaviest');
          $replacements[$original] = check_plain($account->roles[$heaviest_role]);
          break;

        case 'heaviest-role-id':
          $heaviest_role = role_weights_get_weighted_max($account->roles, 'heaviest');
          $replacements[$original] = $heaviest_role;
          break;

        case 'heaviest-role-class':
          $heaviest_role = role_weights_get_weighted_max($account->roles, 'heaviest');
          $replacements[$original] = 'role-' . strtolower(str_replace(' ', '-', preg_replace($css_pattern, '', $account->roles[$heaviest_role])));
          break;
      }
    }
  }

  return $replacements;
}
